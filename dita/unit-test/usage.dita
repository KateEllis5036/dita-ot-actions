<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="usage">
    <title>Usage</title>
    <body>
        <note type="tip">
            <p>
               A series of test suites can be found within the plug-in at
               <codeph>PATH_TO_DITA_OT/plugins/fox.jason.unit-test/sample</codeph>.
            </p>
        </note>
        <section id="obtaining-a-unit-test-report">
            <title>Obtaining a unit test report</title>
            <p>
               To run, use the <option>unit-test</option> transform.
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>unit-test</option> \
     <parmname>--output</parmname> out \
     <parmname>--input</parmname> PATH_TO_UNIT_TESTS</codeblock>
            <p>
               Once the command has run, a test report file is created. Additionally, if any
               error occurs, the command will fail.
            </p>
            <p>
               <b>Sample Test Report</b> This is the test report from the example tests found
               within the plug-in <codeph>sample</codeph> directory. Nine tests are run over
               two test suites (PDF and HTML processing) - a third test suite has been disabled.
                <fig id="unformatted-dita">
                    <title>Test Report</title>
                    <image outputclass="img-thumbnail" scalefit="yes" href="https://jason-fox.github.io/fox.jason.unit-test/results.png" scope="external">
                        <alt/>
                    </image>
                </fig>
            </p>
            <ul>
                <li>
                   If the <parmname>--input</parmname> input directory is a test suite, all tests
                   within the suite will be run.
                </li>
                <li>
                   If the <parmname>--input</parmname> input directory is not a test suite, all
                   test suites directly beneath that directory will be run.
                </li>
            </ul>
        </section>
        <section id="xslt-coverage-report">
            <title>XSLT Coverage Report</title>
            <p>
               To run a XSLT Coverage Report, each DITA-OT Plug-In must be <b>instrumented</b>
               - this annotates the XSLT templates within the plugin to be able to generate
               coverage information. A copy of each <codeph>*.xsl</codeph> file is also saved
               with the <codeph>*.orig</codeph> suffix.
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>xsl-instrument</option> \
     <parmname>--input</parmname> PATH_TO_PLUG_IN</codeblock>
            <p>
               To revert back to the original files just run the de-instrument transform as shown:
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>xsl-deinstrument</option> \
     <parmname>--input</parmname> PATH_TO_PLUG_IN</codeblock>
            <p>
               Once a Plug-In has been <b>instrumented</b> the test suite should contain a
               <codeph>template-coverage.xml</codeph> file which holds a list of all template
               decision points. To obtain coverage information, use the <option>unit-test</option>
               transform as stated previously:
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>unit-test</option> \
     <parmname>--input</parmname> PATH_TO_UNIT_TESTS</codeblock>
            <ul>
                <li>
                   If the <parmname>--input</parmname> input directory is a test suite, XSL
                   coverage for that test suite will be reported.
                </li>
                <li>
                   If the <parmname>--input</parmname> input directory is not a test suite, XSL
                   coverage for all test suites directly beneath that directory will be reported.
                </li>
            </ul>
            <p>
               Once the command has run, both a test report file and an XSL coverage report
               file are created. Additionally, if any error occurs, the command will fail.
            </p>
            <p>
               It is also possible to run XSL coverage over a single test. An individual test
               can be run directly from the command line by running the default target within
               that test. This can be followed by direct invocation of the coverage report.
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>ant</cmdname> <parmname>-f</parmname> PATH_TO_PLUGIN/test/TEST_NAME/build.xml
<cmdname>dita</cmdname> <parmname>--format</parmname> <option>xsl-report</option> \
     <parmname>--input</parmname> PATH_TO_PLUGIN</codeblock>
        </section>
        <section id="sample-xsl-report">
            <title>Sample XSL Report</title>
            <p>
               The XSL coverage report will show a schematic of all template decision points,
               with covered lines displayed in green, and uncovered lines displayed in red.
            </p>
            <fig>
                <title>XSL coverage</title>
                <image outputclass="img-thumbnail" scalefit="yes" href="https://jason-fox.github.io/fox.jason.unit-test/xsl-coverage.png" scope="external">
                    <alt/>
                </image>
            </fig>
        </section>
        <section id="token-coverage-report">
            <title>Token Coverage Report</title>
            <p>
               This is a quicker alternative report to XSLT instrumentation and code coverage,
               but it requires the developer to create the token <codeph>coverage.xml</codeph>
               file manually. Each test suite should contain a <codeph>coverage.xml</codeph>
               file which holds a series of tokens representing all potential output values.
               To obtain coverage information, use the <option>token-report</option> transform.
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>token-report</option> \
     <parmname>--input</parmname> PATH_TO_UNIT_TESTS</codeblock>
            <p>
               Once the command has run, a coverage report is created.
            </p>
        </section>
        <section id="sample-token-report">
            <title>Sample Token Report</title>
            <p>
               This is the token report from the example tests found within the plug-in
               <codeph>sample</codeph> directory.
            </p>
            <ul>
                <li>
                   Coverage for the Spell-checker is looking to ensure that all rules have been
                   run. Uncovered rules are highlighted in RED.
                </li>
                <li>
                   Coverage for HTML processing is looking for the presence of <xmlelement>codeph</xmlelement>,
                   <xmlelement>codeblock</xmlelement> and <xmlelement>p</xmlelement> tags being
                   rendered in the tests.
                </li>
            </ul>
            <fig>
                <title>Token report</title>
                <image outputclass="img-thumbnail" scalefit="yes" href="https://jason-fox.github.io/fox.jason.unit-test/coverage.png" scope="external">
                    <alt/>
                </image>
            </fig>
            <ul>
                <li>
                   If the <parmname>--input</parmname> input directory is a test suite, coverage
                   for that test suite will be reported.
                </li>
                <li>
                   If the <parmname>--input</parmname> input directory is not a test suite,
                   coverage for all test suites directly beneath that directory will be reported.
                </li>
            </ul>
        </section>
        <section id="obtaining-ant-script-profile-information">
            <title>Obtaining ANT script profile information</title>
            <p>
               <b>Antro</b> is a hierarchical and line-level profiler for Ant build scripts. It
               can be run to check which ANT scripts have been invoked and how long they took.
            </p>
            <p>
               To obtain profile information, use the <option>antro</option> transform and
               supply an additional test transtype.
            </p>
            <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>antro</option><parmname
        >--test.transform</parmname>=TRANSFORM_TO_PROFILE \
     <parmname>--input</parmname> document.ditamap</codeblock>
            <p>
               A profiler JSON file will be generated.
            </p>
        </section>
        <section id="viewing-profiler-information">
            <title>Viewing profiler information</title>
            <p>
               To run the UI for the Antro profiler, use the <option>antro-ui</option>
               transform. The <parmname>--input</parmname> parameter is mandatory for all
               DITA-OT plug-ins, and should point to a real file, but is not used for this
               transform.
            </p>
            <codeblock><cmdname>dita</cmdname> <parmname>--format</parmname> <option>antro-ui</option> \
     <parmname>--input</parmname> document.ditamap</codeblock>
            <p>
               The Antro UI is the displayed, load the profiler json file from to display a bar
               graph showing how long each ANT target took:
            </p>
            <p>
               <b>Sample Antro Display</b> The Profiler was run against the <option>pdf</option>
               transform, FOP processing took 16s
            </p>
            <fig>
                <title>Antro</title>
                <image outputclass="img-thumbnail" scalefit="yes" href="https://jason-fox.github.io/fox.jason.unit-test/profiler-bar.png" scope="external">
                    <alt/>
                </image>
            </fig>
            <p>
               You can drill down to an individual line to see if it has been invoked and how
               long it took:
            </p>
            <fig>
                <title>Antro Details</title>
                <image outputclass="img-thumbnail" scalefit="yes" href="https://jason-fox.github.io/fox.jason.unit-test/profiler.png" scope="external">
                    <alt/>
                </image>
            </fig>
        </section>
        <section id="parameter-reference">
            <title>Parameter Reference</title>
               <indexterm><parmname>test.colorize</parmname>
            </indexterm>
               <indexterm><parmname>test.copy</parmname>
            </indexterm>
               <indexterm><parmname>test.transtype</parmname>
            </indexterm>
               <indexterm><parmname>test.propertyfile</parmname>
            </indexterm>
            <ul>
                <li>
                   <parmname>test.colorize</parmname> - When set, successes and failures are output
                   highlighted using ANSI color codes
                </li>
                <li>
                   <parmname>test.copy</parmname> - Specifies whether regenerated expecations
                   should be copied. Default is <option>false</option>
                </li>
                <li>
                   <parmname>test.transtype</parmname> - The real transtype to run the antro
                   profiler against
                </li>
                <li>
                   <parmname>test.propertyfile</parmname> - A properties file to use when running
                   the unit tests or antro profiler
                </li>
            </ul>
        </section>
    </body>
    <topic id="github-actions" conref="./github-actions.dita#github-actions">
        <title/>
        <body/>
    </topic>
    <topic id="travis-ci" conref="./travis-ci.dita#travis-ci">
        <title/>
        <body/>
    </topic>
    <topic id="coveralls" conref="./coveralls.dita#coveralls">
        <title/>
        <body/>
    </topic>
</topic>
